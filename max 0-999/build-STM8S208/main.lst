                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _display
                                     13 	.globl _milis
                                     14 	.globl _init_milis
                                     15 	.globl _GPIO_WriteLow
                                     16 	.globl _GPIO_WriteHigh
                                     17 	.globl _GPIO_Init
                                     18 	.globl _CLK_HSIPrescalerConfig
                                     19 	.globl _init
                                     20 ;--------------------------------------------------------
                                     21 ; ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DATA
                                     24 ;--------------------------------------------------------
                                     25 ; ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area INITIALIZED
                                     28 ;--------------------------------------------------------
                                     29 ; Stack segment in internal ram
                                     30 ;--------------------------------------------------------
                                     31 	.area SSEG
      000000                         32 __start__stack:
      000000                         33 	.ds	1
                                     34 
                                     35 ;--------------------------------------------------------
                                     36 ; absolute external ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area DABS (ABS)
                                     39 
                                     40 ; default segment ordering for linker
                                     41 	.area HOME
                                     42 	.area GSINIT
                                     43 	.area GSFINAL
                                     44 	.area CONST
                                     45 	.area INITIALIZER
                                     46 	.area CODE
                                     47 
                                     48 ;--------------------------------------------------------
                                     49 ; interrupt vector
                                     50 ;--------------------------------------------------------
                                     51 	.area HOME
      000000                         52 __interrupt_vect:
      000000 82v00u00u00             53 	int s_GSINIT ; reset
      000004 82v00u00u00             54 	int _TRAP_IRQHandler ; trap
      000008 82v00u00u00             55 	int _TLI_IRQHandler ; int0
      00000C 82v00u00u00             56 	int _AWU_IRQHandler ; int1
      000010 82v00u00u00             57 	int _CLK_IRQHandler ; int2
      000014 82v00u00u00             58 	int _EXTI_PORTA_IRQHandler ; int3
      000018 82v00u00u00             59 	int _EXTI_PORTB_IRQHandler ; int4
      00001C 82v00u00u00             60 	int _EXTI_PORTC_IRQHandler ; int5
      000020 82v00u00u00             61 	int _EXTI_PORTD_IRQHandler ; int6
      000024 82v00u00u00             62 	int _EXTI_PORTE_IRQHandler ; int7
      000028 82v00u00u00             63 	int _CAN_RX_IRQHandler ; int8
      00002C 82v00u00u00             64 	int _CAN_TX_IRQHandler ; int9
      000030 82v00u00u00             65 	int _SPI_IRQHandler ; int10
      000034 82v00u00u00             66 	int _TIM1_UPD_OVF_TRG_BRK_IRQHandler ; int11
      000038 82v00u00u00             67 	int _TIM1_CAP_COM_IRQHandler ; int12
      00003C 82v00u00u00             68 	int _TIM2_UPD_OVF_BRK_IRQHandler ; int13
      000040 82v00u00u00             69 	int _TIM2_CAP_COM_IRQHandler ; int14
      000044 82v00u00u00             70 	int _TIM3_UPD_OVF_BRK_IRQHandler ; int15
      000048 82v00u00u00             71 	int _TIM3_CAP_COM_IRQHandler ; int16
      00004C 82v00u00u00             72 	int _UART1_TX_IRQHandler ; int17
      000050 82v00u00u00             73 	int _UART1_RX_IRQHandler ; int18
      000054 82v00u00u00             74 	int _I2C_IRQHandler ; int19
      000058 82v00u00u00             75 	int _UART3_TX_IRQHandler ; int20
      00005C 82v00u00u00             76 	int _UART3_RX_IRQHandler ; int21
      000060 82v00u00u00             77 	int _ADC2_IRQHandler ; int22
      000064 82v00u00u00             78 	int _TIM4_UPD_OVF_IRQHandler ; int23
      000068 82v00u00u00             79 	int _EEPROM_EEC_IRQHandler ; int24
                                     80 ;--------------------------------------------------------
                                     81 ; global & static initialisations
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME
                                     84 	.area GSINIT
                                     85 	.area GSFINAL
                                     86 	.area GSINIT
      000000 CDr00r00         [ 4]   87 	call	___sdcc_external_startup
      000003 4D               [ 1]   88 	tnz	a
      000004 27 03            [ 1]   89 	jreq	__sdcc_init_data
      000006 CCr00r6C         [ 2]   90 	jp	__sdcc_program_startup
      000009                         91 __sdcc_init_data:
                                     92 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]   93 	ldw x, #l_DATA
      00000C 27 07            [ 1]   94 	jreq	00002$
      00000E                         95 00001$:
      00000E 72 4FuFFuFF      [ 1]   96 	clr (s_DATA - 1, x)
      000012 5A               [ 2]   97 	decw x
      000013 26 F9            [ 1]   98 	jrne	00001$
      000015                         99 00002$:
      000015 AEr00r00         [ 2]  100 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]  101 	jreq	00004$
      00001A                        102 00003$:
      00001A D6uFFuFF         [ 1]  103 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]  104 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]  105 	decw	x
      000021 26 F7            [ 1]  106 	jrne	00003$
      000023                        107 00004$:
                                    108 ; stm8_genXINIT() end
                                    109 	.area GSFINAL
      000000 CCr00r6C         [ 2]  110 	jp	__sdcc_program_startup
                                    111 ;--------------------------------------------------------
                                    112 ; Home
                                    113 ;--------------------------------------------------------
                                    114 	.area HOME
                                    115 	.area HOME
      00006C                        116 __sdcc_program_startup:
      00006C CCr00rB7         [ 2]  117 	jp	_main
                                    118 ;	return from main will return to caller
                                    119 ;--------------------------------------------------------
                                    120 ; code
                                    121 ;--------------------------------------------------------
                                    122 	.area CODE
                                    123 ;	./src/main.c: 10: void init(void) {
                                    124 ; genLabel
                                    125 ;	-----------------------------------------
                                    126 ;	 function init
                                    127 ;	-----------------------------------------
                                    128 ;	Register assignment is optimal.
                                    129 ;	Stack space usage: 0 bytes.
      000000                        130 _init:
                                    131 ;	./src/main.c: 11: CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1); // taktovani MCU na 16MHz
                                    132 ; genSend
      000000 4F               [ 1]  133 	clr	a
                                    134 ; genCall
      000001 CDr00r00         [ 4]  135 	call	_CLK_HSIPrescalerConfig
                                    136 ;	./src/main.c: 13: GPIO_Init(DIN_PORT, DIN_PIN, GPIO_MODE_OUT_PP_LOW_SLOW);
                                    137 ; genIPush
      000004 4B C0            [ 1]  138 	push	#0xc0
                                    139 ; genSend
      000006 A6 04            [ 1]  140 	ld	a, #0x04
                                    141 ; genSend
      000008 AE 50 05         [ 2]  142 	ldw	x, #0x5005
                                    143 ; genCall
      00000B CDr00r00         [ 4]  144 	call	_GPIO_Init
                                    145 ;	./src/main.c: 14: GPIO_Init(CS_PORT, CS_PIN, GPIO_MODE_OUT_PP_HIGH_SLOW);
                                    146 ; genIPush
      00000E 4B D0            [ 1]  147 	push	#0xd0
                                    148 ; genSend
      000010 A6 02            [ 1]  149 	ld	a, #0x02
                                    150 ; genSend
      000012 AE 50 05         [ 2]  151 	ldw	x, #0x5005
                                    152 ; genCall
      000015 CDr00r00         [ 4]  153 	call	_GPIO_Init
                                    154 ;	./src/main.c: 15: GPIO_Init(CLK_PORT, CLK_PIN, GPIO_MODE_OUT_PP_LOW_SLOW);
                                    155 ; genIPush
      000018 4B C0            [ 1]  156 	push	#0xc0
                                    157 ; genSend
      00001A A6 01            [ 1]  158 	ld	a, #0x01
                                    159 ; genSend
      00001C AE 50 05         [ 2]  160 	ldw	x, #0x5005
                                    161 ; genCall
      00001F CDr00r00         [ 4]  162 	call	_GPIO_Init
                                    163 ;	./src/main.c: 17: init_milis();
                                    164 ; genCall
      000022 CCr00r00         [ 2]  165 	jp	_init_milis
                                    166 ; genLabel
      000025                        167 00101$:
                                    168 ;	./src/main.c: 18: }
                                    169 ; genEndFunction
      000025 81               [ 4]  170 	ret
                                    171 ;	./src/main.c: 20: void display(uint8_t address, uint8_t data) {
                                    172 ; genLabel
                                    173 ;	-----------------------------------------
                                    174 ;	 function display
                                    175 ;	-----------------------------------------
                                    176 ;	Register assignment is optimal.
                                    177 ;	Stack space usage: 2 bytes.
      000026                        178 _display:
      000026 89               [ 2]  179 	pushw	x
                                    180 ; genReceive
      000027 6B 01            [ 1]  181 	ld	(0x01, sp), a
                                    182 ;	./src/main.c: 22: LOW(CS); // začátek přenosu
                                    183 ; genSend
      000029 A6 02            [ 1]  184 	ld	a, #0x02
                                    185 ; genSend
      00002B AE 50 05         [ 2]  186 	ldw	x, #0x5005
                                    187 ; genCall
      00002E CDr00r00         [ 4]  188 	call	_GPIO_WriteLow
                                    189 ;	./src/main.c: 27: mask = 0b10000000;
                                    190 ; genAssign
      000031 A6 80            [ 1]  191 	ld	a, #0x80
      000033 6B 02            [ 1]  192 	ld	(0x02, sp), a
                                    193 ;	./src/main.c: 28: while (mask) {
                                    194 ; genLabel
      000035                        195 00104$:
                                    196 ; genIfx
      000035 0D 02            [ 1]  197 	tnz	(0x02, sp)
      000037 26 03            [ 1]  198 	jrne	00157$
      000039 CCr00r6E         [ 2]  199 	jp	00106$
      00003C                        200 00157$:
                                    201 ;	./src/main.c: 29: if (address & mask) {
                                    202 ; genAnd
      00003C 7B 01            [ 1]  203 	ld	a, (0x01, sp)
      00003E 14 02            [ 1]  204 	and	a, (0x02, sp)
                                    205 ; genIfx
      000040 4D               [ 1]  206 	tnz	a
      000041 26 03            [ 1]  207 	jrne	00158$
      000043 CCr00r51         [ 2]  208 	jp	00102$
      000046                        209 00158$:
                                    210 ;	./src/main.c: 30: HIGH(DIN);
                                    211 ; genSend
      000046 A6 04            [ 1]  212 	ld	a, #0x04
                                    213 ; genSend
      000048 AE 50 05         [ 2]  214 	ldw	x, #0x5005
                                    215 ; genCall
      00004B CDr00r00         [ 4]  216 	call	_GPIO_WriteHigh
                                    217 ; genGoto
      00004E CCr00r59         [ 2]  218 	jp	00103$
                                    219 ; genLabel
      000051                        220 00102$:
                                    221 ;	./src/main.c: 32: LOW(DIN);
                                    222 ; genSend
      000051 A6 04            [ 1]  223 	ld	a, #0x04
                                    224 ; genSend
      000053 AE 50 05         [ 2]  225 	ldw	x, #0x5005
                                    226 ; genCall
      000056 CDr00r00         [ 4]  227 	call	_GPIO_WriteLow
                                    228 ; genLabel
      000059                        229 00103$:
                                    230 ;	./src/main.c: 34: HIGH(CLK);
                                    231 ; genSend
      000059 A6 01            [ 1]  232 	ld	a, #0x01
                                    233 ; genSend
      00005B AE 50 05         [ 2]  234 	ldw	x, #0x5005
                                    235 ; genCall
      00005E CDr00r00         [ 4]  236 	call	_GPIO_WriteHigh
                                    237 ;	./src/main.c: 35: mask = mask >> 1;
                                    238 ; genRightShiftLiteral
      000061 04 02            [ 1]  239 	srl	(0x02, sp)
                                    240 ;	./src/main.c: 36: LOW(CLK);
                                    241 ; genSend
      000063 A6 01            [ 1]  242 	ld	a, #0x01
                                    243 ; genSend
      000065 AE 50 05         [ 2]  244 	ldw	x, #0x5005
                                    245 ; genCall
      000068 CDr00r00         [ 4]  246 	call	_GPIO_WriteLow
                                    247 ; genGoto
      00006B CCr00r35         [ 2]  248 	jp	00104$
                                    249 ; genLabel
      00006E                        250 00106$:
                                    251 ;	./src/main.c: 39: mask = 0b10000000;
                                    252 ; genAssign
      00006E A6 80            [ 1]  253 	ld	a, #0x80
      000070 6B 02            [ 1]  254 	ld	(0x02, sp), a
                                    255 ;	./src/main.c: 40: while (mask) {
                                    256 ; genLabel
      000072                        257 00110$:
                                    258 ; genIfx
      000072 0D 02            [ 1]  259 	tnz	(0x02, sp)
      000074 26 03            [ 1]  260 	jrne	00159$
      000076 CCr00rAB         [ 2]  261 	jp	00112$
      000079                        262 00159$:
                                    263 ;	./src/main.c: 41: if (data & mask) {
                                    264 ; genAnd
      000079 7B 05            [ 1]  265 	ld	a, (0x05, sp)
      00007B 14 02            [ 1]  266 	and	a, (0x02, sp)
                                    267 ; genIfx
      00007D 4D               [ 1]  268 	tnz	a
      00007E 26 03            [ 1]  269 	jrne	00160$
      000080 CCr00r8E         [ 2]  270 	jp	00108$
      000083                        271 00160$:
                                    272 ;	./src/main.c: 42: HIGH(DIN);
                                    273 ; genSend
      000083 A6 04            [ 1]  274 	ld	a, #0x04
                                    275 ; genSend
      000085 AE 50 05         [ 2]  276 	ldw	x, #0x5005
                                    277 ; genCall
      000088 CDr00r00         [ 4]  278 	call	_GPIO_WriteHigh
                                    279 ; genGoto
      00008B CCr00r96         [ 2]  280 	jp	00109$
                                    281 ; genLabel
      00008E                        282 00108$:
                                    283 ;	./src/main.c: 44: LOW(DIN);
                                    284 ; genSend
      00008E A6 04            [ 1]  285 	ld	a, #0x04
                                    286 ; genSend
      000090 AE 50 05         [ 2]  287 	ldw	x, #0x5005
                                    288 ; genCall
      000093 CDr00r00         [ 4]  289 	call	_GPIO_WriteLow
                                    290 ; genLabel
      000096                        291 00109$:
                                    292 ;	./src/main.c: 46: HIGH(CLK);
                                    293 ; genSend
      000096 A6 01            [ 1]  294 	ld	a, #0x01
                                    295 ; genSend
      000098 AE 50 05         [ 2]  296 	ldw	x, #0x5005
                                    297 ; genCall
      00009B CDr00r00         [ 4]  298 	call	_GPIO_WriteHigh
                                    299 ;	./src/main.c: 47: mask = mask >> 1;
                                    300 ; genRightShiftLiteral
      00009E 04 02            [ 1]  301 	srl	(0x02, sp)
                                    302 ;	./src/main.c: 48: LOW(CLK);
                                    303 ; genSend
      0000A0 A6 01            [ 1]  304 	ld	a, #0x01
                                    305 ; genSend
      0000A2 AE 50 05         [ 2]  306 	ldw	x, #0x5005
                                    307 ; genCall
      0000A5 CDr00r00         [ 4]  308 	call	_GPIO_WriteLow
                                    309 ; genGoto
      0000A8 CCr00r72         [ 2]  310 	jp	00110$
                                    311 ; genLabel
      0000AB                        312 00112$:
                                    313 ;	./src/main.c: 51: HIGH(CS); // konec přenosu
                                    314 ; genSend
      0000AB A6 02            [ 1]  315 	ld	a, #0x02
                                    316 ; genSend
      0000AD AE 50 05         [ 2]  317 	ldw	x, #0x5005
                                    318 ; genCall
      0000B0 CDr00r00         [ 4]  319 	call	_GPIO_WriteHigh
                                    320 ; genLabel
      0000B3                        321 00113$:
                                    322 ;	./src/main.c: 52: }
                                    323 ; genEndFunction
      0000B3 85               [ 2]  324 	popw	x
      0000B4 85               [ 2]  325 	popw	x
      0000B5 84               [ 1]  326 	pop	a
      0000B6 FC               [ 2]  327 	jp	(x)
                                    328 ;	./src/main.c: 54: int main(void) {
                                    329 ; genLabel
                                    330 ;	-----------------------------------------
                                    331 ;	 function main
                                    332 ;	-----------------------------------------
                                    333 ;	Register assignment might be sub-optimal.
                                    334 ;	Stack space usage: 15 bytes.
      0000B7                        335 _main:
      0000B7 52 0F            [ 2]  336 	sub	sp, #15
                                    337 ;	./src/main.c: 56: uint32_t time = 0;
                                    338 ; genAssign
      0000B9 5F               [ 1]  339 	clrw	x
      0000BA 1F 03            [ 2]  340 	ldw	(0x03, sp), x
      0000BC 1F 01            [ 2]  341 	ldw	(0x01, sp), x
                                    342 ;	./src/main.c: 57: uint8_t number = 0;
                                    343 ; genAssign
      0000BE 0F 0D            [ 1]  344 	clr	(0x0d, sp)
                                    345 ;	./src/main.c: 58: uint16_t number1 = 000;
                                    346 ; genAssign
      0000C0 5F               [ 1]  347 	clrw	x
      0000C1 1F 0E            [ 2]  348 	ldw	(0x0e, sp), x
                                    349 ;	./src/main.c: 62: init();
                                    350 ; genCall
      0000C3 CDr00r00         [ 4]  351 	call	_init
                                    352 ;	./src/main.c: 64: display(DECODE_MODE, 0b11111111);
                                    353 ; genIPush
      0000C6 4B FF            [ 1]  354 	push	#0xff
                                    355 ; genSend
      0000C8 A6 09            [ 1]  356 	ld	a, #0x09
                                    357 ; genCall
      0000CA CDr00r26         [ 4]  358 	call	_display
                                    359 ;	./src/main.c: 65: display(SCAN_LIMIT, 7);
                                    360 ; genIPush
      0000CD 4B 07            [ 1]  361 	push	#0x07
                                    362 ; genSend
      0000CF A6 0B            [ 1]  363 	ld	a, #0x0b
                                    364 ; genCall
      0000D1 CDr00r26         [ 4]  365 	call	_display
                                    366 ;	./src/main.c: 66: display(INTENSITY, 1);
                                    367 ; genIPush
      0000D4 4B 01            [ 1]  368 	push	#0x01
                                    369 ; genSend
      0000D6 A6 0A            [ 1]  370 	ld	a, #0x0a
                                    371 ; genCall
      0000D8 CDr00r26         [ 4]  372 	call	_display
                                    373 ;	./src/main.c: 67: display(DISPLAY_TEST, DISPLAY_TEST_OFF);
                                    374 ; genIPush
      0000DB 4B 00            [ 1]  375 	push	#0x00
                                    376 ; genSend
      0000DD A6 0F            [ 1]  377 	ld	a, #0x0f
                                    378 ; genCall
      0000DF CDr00r26         [ 4]  379 	call	_display
                                    380 ;	./src/main.c: 68: display(SHUTDOWN, SHUTDOWN_ON);
                                    381 ; genIPush
      0000E2 4B 01            [ 1]  382 	push	#0x01
                                    383 ; genSend
      0000E4 A6 0C            [ 1]  384 	ld	a, #0x0c
                                    385 ; genCall
      0000E6 CDr00r26         [ 4]  386 	call	_display
                                    387 ;	./src/main.c: 69: display(DIGIT0, 0xF);
                                    388 ; genIPush
      0000E9 4B 0F            [ 1]  389 	push	#0x0f
                                    390 ; genSend
      0000EB A6 01            [ 1]  391 	ld	a, #0x01
                                    392 ; genCall
      0000ED CDr00r26         [ 4]  393 	call	_display
                                    394 ;	./src/main.c: 70: display(DIGIT1, 0xF);
                                    395 ; genIPush
      0000F0 4B 0F            [ 1]  396 	push	#0x0f
                                    397 ; genSend
      0000F2 A6 02            [ 1]  398 	ld	a, #0x02
                                    399 ; genCall
      0000F4 CDr00r26         [ 4]  400 	call	_display
                                    401 ;	./src/main.c: 71: display(DIGIT2, 0xF);
                                    402 ; genIPush
      0000F7 4B 0F            [ 1]  403 	push	#0x0f
                                    404 ; genSend
      0000F9 A6 03            [ 1]  405 	ld	a, #0x03
                                    406 ; genCall
      0000FB CDr00r26         [ 4]  407 	call	_display
                                    408 ;	./src/main.c: 72: display(DIGIT3, 0xF);
                                    409 ; genIPush
      0000FE 4B 0F            [ 1]  410 	push	#0x0f
                                    411 ; genSend
      000100 A6 04            [ 1]  412 	ld	a, #0x04
                                    413 ; genCall
      000102 CDr00r26         [ 4]  414 	call	_display
                                    415 ;	./src/main.c: 73: display(DIGIT4, 0xF);
                                    416 ; genIPush
      000105 4B 0F            [ 1]  417 	push	#0x0f
                                    418 ; genSend
      000107 A6 05            [ 1]  419 	ld	a, #0x05
                                    420 ; genCall
      000109 CDr00r26         [ 4]  421 	call	_display
                                    422 ;	./src/main.c: 74: display(DIGIT5, 0xF);
                                    423 ; genIPush
      00010C 4B 0F            [ 1]  424 	push	#0x0f
                                    425 ; genSend
      00010E A6 06            [ 1]  426 	ld	a, #0x06
                                    427 ; genCall
      000110 CDr00r26         [ 4]  428 	call	_display
                                    429 ;	./src/main.c: 75: display(DIGIT6, 0xF);
                                    430 ; genIPush
      000113 4B 0F            [ 1]  431 	push	#0x0f
                                    432 ; genSend
      000115 A6 07            [ 1]  433 	ld	a, #0x07
                                    434 ; genCall
      000117 CDr00r26         [ 4]  435 	call	_display
                                    436 ;	./src/main.c: 76: display(DIGIT7, 0xF);
                                    437 ; genIPush
      00011A 4B 0F            [ 1]  438 	push	#0x0f
                                    439 ; genSend
      00011C A6 08            [ 1]  440 	ld	a, #0x08
                                    441 ; genCall
      00011E CDr00r26         [ 4]  442 	call	_display
                                    443 ;	./src/main.c: 78: while(1){
                                    444 ; genLabel
      000121                        445 00108$:
                                    446 ;	./src/main.c: 80: if (milis() - time > 300){
                                    447 ; genCall
      000121 CDr00r00         [ 4]  448 	call	_milis
      000124 1F 07            [ 2]  449 	ldw	(0x07, sp), x
      000126 17 05            [ 2]  450 	ldw	(0x05, sp), y
                                    451 ; genMinus
      000128 1E 07            [ 2]  452 	ldw	x, (0x07, sp)
      00012A 72 F0 03         [ 2]  453 	subw	x, (0x03, sp)
      00012D 1F 0B            [ 2]  454 	ldw	(0x0b, sp), x
      00012F 7B 06            [ 1]  455 	ld	a, (0x06, sp)
      000131 12 02            [ 1]  456 	sbc	a, (0x02, sp)
      000133 6B 0A            [ 1]  457 	ld	(0x0a, sp), a
      000135 7B 05            [ 1]  458 	ld	a, (0x05, sp)
      000137 12 01            [ 1]  459 	sbc	a, (0x01, sp)
      000139 6B 09            [ 1]  460 	ld	(0x09, sp), a
                                    461 ; genCmp
                                    462 ; genCmpTnz
      00013B AE 01 2C         [ 2]  463 	ldw	x, #0x012c
      00013E 13 0B            [ 2]  464 	cpw	x, (0x0b, sp)
      000140 4F               [ 1]  465 	clr	a
      000141 12 0A            [ 1]  466 	sbc	a, (0x0a, sp)
      000143 4F               [ 1]  467 	clr	a
      000144 12 09            [ 1]  468 	sbc	a, (0x09, sp)
      000146 25 03            [ 1]  469 	jrc	00140$
      000148 CCr01r21         [ 2]  470 	jp	00108$
      00014B                        471 00140$:
                                    472 ; skipping generated iCode
                                    473 ;	./src/main.c: 81: time = milis();
                                    474 ; genCall
      00014B CDr00r00         [ 4]  475 	call	_milis
      00014E 1F 03            [ 2]  476 	ldw	(0x03, sp), x
      000150 17 01            [ 2]  477 	ldw	(0x01, sp), y
                                    478 ;	./src/main.c: 82: display(DIGIT0, number);
                                    479 ; genIPush
      000152 7B 0D            [ 1]  480 	ld	a, (0x0d, sp)
      000154 88               [ 1]  481 	push	a
                                    482 ; genSend
      000155 A6 01            [ 1]  483 	ld	a, #0x01
                                    484 ; genCall
      000157 CDr00r26         [ 4]  485 	call	_display
                                    486 ;	./src/main.c: 83: number ++;
                                    487 ; genPlus
      00015A 0C 0D            [ 1]  488 	inc	(0x0d, sp)
                                    489 ;	./src/main.c: 85: if(number>9){
                                    490 ; genCmp
                                    491 ; genCmpTnz
      00015C 7B 0D            [ 1]  492 	ld	a, (0x0d, sp)
      00015E A1 09            [ 1]  493 	cp	a, #0x09
      000160 22 03            [ 1]  494 	jrugt	00141$
      000162 CCr01r67         [ 2]  495 	jp	00102$
      000165                        496 00141$:
                                    497 ; skipping generated iCode
                                    498 ;	./src/main.c: 86: number=0;
                                    499 ; genAssign
      000165 0F 0D            [ 1]  500 	clr	(0x0d, sp)
                                    501 ; genLabel
      000167                        502 00102$:
                                    503 ;	./src/main.c: 90: vysledek = number1/100;
                                    504 ; genCast
                                    505 ; genAssign
      000167 16 0E            [ 2]  506 	ldw	y, (0x0e, sp)
      000169 17 0B            [ 2]  507 	ldw	(0x0b, sp), y
                                    508 ; genDivMod
      00016B 1E 0B            [ 2]  509 	ldw	x, (0x0b, sp)
      00016D 90 AE 00 64      [ 2]  510 	ldw	y, #0x0064
      000171 65               [ 2]  511 	divw	x, y
      000172 9F               [ 1]  512 	ld	a, xl
                                    513 ; genCast
                                    514 ; genAssign
                                    515 ;	./src/main.c: 92: display(DIGIT6, vysledek);
                                    516 ; genIPush
      000173 88               [ 1]  517 	push	a
                                    518 ; genSend
      000174 A6 07            [ 1]  519 	ld	a, #0x07
                                    520 ; genCall
      000176 CDr00r26         [ 4]  521 	call	_display
                                    522 ;	./src/main.c: 94: n= number1%100;
                                    523 ; genDivMod
      000179 1E 0B            [ 2]  524 	ldw	x, (0x0b, sp)
      00017B 90 AE 00 64      [ 2]  525 	ldw	y, #0x0064
      00017F 65               [ 2]  526 	divw	x, y
      000180 93               [ 1]  527 	ldw	x, y
                                    528 ; genCast
                                    529 ; genAssign
                                    530 ;	./src/main.c: 95: vysledek1 = n/10;
                                    531 ; genCast
                                    532 ; genAssign
                                    533 ; genDivMod
      000181 90 AE 00 0A      [ 2]  534 	ldw	y, #0x000a
      000185 65               [ 2]  535 	divw	x, y
      000186 9F               [ 1]  536 	ld	a, xl
                                    537 ; genCast
                                    538 ; genAssign
                                    539 ;	./src/main.c: 97: display(DIGIT5, vysledek1);
                                    540 ; genIPush
      000187 88               [ 1]  541 	push	a
                                    542 ; genSend
      000188 A6 06            [ 1]  543 	ld	a, #0x06
                                    544 ; genCall
      00018A CDr00r26         [ 4]  545 	call	_display
                                    546 ;	./src/main.c: 99: n= number1%10;
                                    547 ; genDivMod
      00018D 1E 0B            [ 2]  548 	ldw	x, (0x0b, sp)
      00018F 90 AE 00 0A      [ 2]  549 	ldw	y, #0x000a
      000193 65               [ 2]  550 	divw	x, y
      000194 90 9F            [ 1]  551 	ld	a, yl
                                    552 ; genCast
                                    553 ; genAssign
                                    554 ;	./src/main.c: 100: display(DIGIT4, n);
                                    555 ; genCast
                                    556 ; genAssign
                                    557 ; genIPush
      000196 88               [ 1]  558 	push	a
                                    559 ; genSend
      000197 A6 05            [ 1]  560 	ld	a, #0x05
                                    561 ; genCall
      000199 CDr00r26         [ 4]  562 	call	_display
                                    563 ;	./src/main.c: 102: number1 ++;
                                    564 ; genPlus
      00019C 1E 0E            [ 2]  565 	ldw	x, (0x0e, sp)
      00019E 5C               [ 1]  566 	incw	x
      00019F 1F 0E            [ 2]  567 	ldw	(0x0e, sp), x
      0001A1                        568 00142$:
                                    569 ;	./src/main.c: 104: if(number1>999){
                                    570 ; genCast
                                    571 ; genAssign
      0001A1 1E 0E            [ 2]  572 	ldw	x, (0x0e, sp)
                                    573 ; genCmp
                                    574 ; genCmpTnz
      0001A3 A3 03 E7         [ 2]  575 	cpw	x, #0x03e7
      0001A6 22 03            [ 1]  576 	jrugt	00143$
      0001A8 CCr01r21         [ 2]  577 	jp	00108$
      0001AB                        578 00143$:
                                    579 ; skipping generated iCode
                                    580 ;	./src/main.c: 105: number1 = 0;
                                    581 ; genAssign
      0001AB 5F               [ 1]  582 	clrw	x
      0001AC 1F 0E            [ 2]  583 	ldw	(0x0e, sp), x
                                    584 ; genGoto
      0001AE CCr01r21         [ 2]  585 	jp	00108$
                                    586 ; genLabel
      0001B1                        587 00110$:
                                    588 ;	./src/main.c: 110: }
                                    589 ; genEndFunction
      0001B1 5B 0F            [ 2]  590 	addw	sp, #15
      0001B3 81               [ 4]  591 	ret
                                    592 	.area CODE
                                    593 	.area CONST
                                    594 	.area INITIALIZER
                                    595 	.area CABS (ABS)
